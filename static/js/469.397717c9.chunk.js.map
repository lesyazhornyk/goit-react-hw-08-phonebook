{"version":3,"file":"static/js/469.397717c9.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  width: 40%;\n  padding: 8px;\n  border: 1px solid #000;\n  border-radius: 4px;\n`;\n\nexport const StyledField = styled(Field)`\n  display: block;\n`;\n\nexport const Name = styled.h1`\nfont-size: 40px;\n`;\n\nexport const NameItem = styled.h2`\nfont-size: 40px;\n`;","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { Formik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { StyledForm, StyledField } from './ContactForm.styled';\nimport { selectContacts } from 'redux/selectors';\nimport { addContact } from 'redux/operations';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (name, number) => {\n    if (contacts.some(contact => contact.name === name)) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      onSubmit={(values, { resetForm }) => {\n        handleSubmit(values.name, values.number);\n        resetForm();\n      }}\n    >\n      <StyledForm>\n        <label htmlFor=\"name\">Name</label>\n        <StyledField name=\"name\" type=\"text\" required />\n        <label htmlFor=\"number\">Number</label>\n        <StyledField name=\"number\" type=\"tel\" required />\n        <button type=\"submit\">Add Contact</button>\n      </StyledForm>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import { useDispatch } from 'react-redux';\nimport { updateFilter } from 'redux/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    dispatch(updateFilter(e.target.value));\n  };\n\n  return (\n    <>\n      <label htmlFor=\"filter\">Find contacts by name</label>\n      <input type=\"text\" name=\"filter\" onChange={handleChange} />\n    </>\n  );\n};\n\nexport default Filter;\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\n\nconst ContactListItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n\n  const handleClick = () => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <li>\n      {name}: {number}\n      <button onClick={handleClick}>Delete</button>\n    </li>\n  );\n};\n\nexport default ContactListItem;\n","import ContactListItem from 'components/ContactListItem/ContactListItem';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/operations';\nimport {\n  selectError,\n  selectIsLoading,\n  selectVisibleContacts,\n} from 'redux/selectors';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const filteredContacts = useSelector(selectVisibleContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      {isLoading && <b>Loading contacts...</b>}\n      {error && <b>{error}</b>}\n      <ul>\n        {filteredContacts.map(contact => (\n          <ContactListItem\n            key={contact.id}\n            name={contact.name}\n            number={contact.number}\n            id={contact.id}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactList;\n","import { Helmet } from 'react-helmet';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport { Name } from 'components/ContactForm/ContactForm.styled';\nimport { NameItem } from 'components/ContactForm/ContactForm.styled';\n\nexport default function Contacts() {\n  return (\n    <div>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <div\n        style={{\n          height: '100vh',\n          justifyContent: 'center',\n          alignItems: 'center',\n          fontSize: 40,\n          color: '#010101',\n          marginLeft: '2.5rem',\n        }}\n      >\n        <Name>Phonebook</Name>\n        <ContactForm />\n\n        <NameItem>Contacts</NameItem>\n        <Filter />\n        <ContactList />\n      </div>\n    </div>\n  );\n}\n"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","StyledField","Field","_templateObject2","Name","_templateObject3","NameItem","_templateObject4","selectIsLoading","state","contacts","isLoading","selectError","error","selectContacts","items","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","dispatch","useDispatch","useSelector","_jsx","Formik","initialValues","number","onSubmit","values","_ref","resetForm","some","alert","concat","addContact","children","_jsxs","htmlFor","type","required","_Fragment","onChange","e","updateFilter","target","value","id","onClick","deleteContact","filteredContacts","useEffect","fetchContacts","map","ContactListItem","Contacts","Helmet","style","height","justifyContent","alignItems","fontSize","color","marginLeft","ContactForm","Filter","ContactList"],"sourceRoot":""}